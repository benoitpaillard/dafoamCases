/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                |
| \\      /  F ield         | cfMesh: A library for mesh generation          |
|  \\    /   O peration     |                                                |
|   \\  /    A nd           | Author: Franjo Juretic                         |
|    \\/     M anipulation  | E-mail: franjo.juretic@c-fields.com            |
\*---------------------------------------------------------------------------*/

FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      meshDict;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

maxCellSize     1;

surfaceFile     "box.stl";

localRefinement
{
    "(profile.*)"
    {
        cellSize 0.03;
/*                cellSize 0.01;*/
/*        refinementThickness 0.03;*/
    }
}

refFine		0.05;
widthFine	0.01;
refNormal		0.005;
widthNormal		0.02;

/*refFine		0.0005;*/
/*widthFine	0.01;*/
/*refNormal		0.005;*/
/*widthNormal		0.04;*/

objectRefinements
{
        
           wake
    {
        type        box;
/*        cellSize    0.05;*/
                cellSize    0.1;
        centre          (1 -0.5 0);
        lengthX		3.5;
                lengthY		1.5;
                        lengthZ		10;
    }
    LEProfile0Fine
    {
    
        type cone;
    
        cellSize $refFine;
    
        radius0 $widthFine;
    
        radius1 $widthFine;
    
        p0 (0.0013203999999999998 0.0007823499999999999 0.0);
    
        p1 (0.0013203999999999998 0.0007823499999999999 1);
    }
    LEProfile0Normal
    {
    
        type cone;
    
        cellSize $refNormal;
    
        radius0 $widthNormal;
    
        radius1 $widthNormal;
    
        p0 (0.0013203999999999998 0.0007823499999999999 0.0);
    
        p1 (0.0013203999999999998 0.0007823499999999999 1);
    }
    TEProfile0Fine
    {
    
        type cone;
    
        cellSize $refFine;
    
        radius0 $widthFine;
    
        radius1 $widthFine;
    
        p0 (0.99907075 0.00023719999999999994 0.0);
    
        p1 (0.99907075 0.00023719999999999994 1);
    }
    TEProfile0Normal
    {
    
        type cone;
    
        cellSize $refNormal;
    
        radius0 $widthNormal;
    
        radius1 $widthNormal;
    
        p0 (0.99907075 0.00023719999999999994 0.0);
    
        p1 (0.99907075 0.00023719999999999994 1);
    }
    LEProfile1Fine
    {
    
        type cone;
    
        cellSize $refFine;
    
        radius0 $widthFine;
    
        radius1 $widthFine;
    
        p0 (1.06231545 -0.27584224999999996 0.0);
    
        p1 (1.06231545 -0.27584224999999996 1);
    }
    LEProfile1Normal
    {
    
        type cone;
    
        cellSize $refNormal;
    
        radius0 $widthNormal;
    
        radius1 $widthNormal;
    
        p0 (1.06231545 -0.27584224999999996 0.0);
    
        p1 (1.06231545 -0.27584224999999996 1);
    }
    TEProfile1Fine
    {
    
        type cone;
    
        cellSize $refFine;
    
        radius0 $widthFine;
    
        radius1 $widthFine;
    
        p0 (2.05172995 -0.40454795 0.0);
    
        p1 (2.05172995 -0.40454795 1);
    }
    TEProfile1Normal
    {
    
        type cone;
    
        cellSize $refNormal;
    
        radius0 $widthNormal;
    
        radius1 $widthNormal;
    
        p0 (2.05172995 -0.40454795 0.0);
    
        p1 (2.05172995 -0.40454795 1);
    }
    LEProfile2Fine
    {
    
        type cone;
    
        cellSize $refFine;
    
        radius0 $widthFine;
    
        radius1 $widthFine;
    
        p0 (1.9743382500000002 -0.5280756499999999 0.0);
    
        p1 (1.9743382500000002 -0.5280756499999999 1);
    }
    LEProfile2Normal
    {
    
        type cone;
    
        cellSize $refNormal;
    
        radius0 $widthNormal;
    
        radius1 $widthNormal;
    
        p0 (1.9743382500000002 -0.5280756499999999 0.0);
    
        p1 (1.9743382500000002 -0.5280756499999999 1);
    }
    TEProfile2Fine
    {
    
        type cone;
    
        cellSize $refFine;
    
        radius0 $widthFine;
    
        radius1 $widthFine;
    
        p0 (2.8542789500000003 -0.99840565 0.0);
    
        p1 (2.8542789500000003 -0.99840565 1);
    }
    TEProfile2Normal
    {
    
        type cone;
    
        cellSize $refNormal;
    
        radius0 $widthNormal;
    
        radius1 $widthNormal;
    
        p0 (2.8542789500000003 -0.99840565 0.0);
    
        p1 (2.8542789500000003 -0.99840565 1);
    }
    LEProfile3Fine
    {
    
        type cone;
    
        cellSize $refFine;
    
        radius0 $widthFine;
    
        radius1 $widthFine;
    
        p0 (2.7862565000000004 -1.0588158 0.0);
    
        p1 (2.7862565000000004 -1.0588158 1);
    }
    LEProfile3Normal
    {
    
        type cone;
    
        cellSize $refNormal;
    
        radius0 $widthNormal;
    
        radius1 $widthNormal;
    
        p0 (2.7862565000000004 -1.0588158 0.0);
    
        p1 (2.7862565000000004 -1.0588158 1);
    }
    TEProfile3Fine
    {
    
        type cone;
    
        cellSize $refFine;
    
        radius0 $widthFine;
    
        radius1 $widthFine;
    
        p0 (3.45196625 -1.80200985 0.0);
    
        p1 (3.45196625 -1.80200985 1);
    }
    TEProfile3Normal
    {
    
        type cone;
    
        cellSize $refNormal;
    
        radius0 $widthNormal;
    
        radius1 $widthNormal;
    
        p0 (3.45196625 -1.80200985 0.0);
    
        p1 (3.45196625 -1.80200985 1);
    }
}

boundaryLayers
{
    nLayers 0;

    patchBoundaryLayers
    {
    "(profile.*)"
{
nLayers 5;
    thicknessRatio 1.2;
    maxFirstLayerThickness 0.01;
}
    }
        optimiseLayer 1;
}

renameBoundary
{
    newPatchNames
    {
                bottomEmptyFaces
        {
            type    symmetry;
            newName symmetry1;
        }
                        topEmptyFaces
        {
            type    symmetry;
            newName symmetry2;
        }
                        "(x.*|y.*)"
        {
            type    patch;
            newName inout;
        }
    
        profile0
        {
        
            type wall;
        
            newName profile0;
        }
    
        profile1
        {
        
            type wall;
        
            newName profile1;
        }
    
        profile2
        {
        
            type wall;
        
            newName profile2;
        }
    
        profile3
        {
        
            type wall;
        
            newName profile3;
        }
    }
}
// ************************************************************************* //

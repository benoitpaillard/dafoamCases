/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                |
| \\      /  F ield         | cfMesh: A library for mesh generation          |
|  \\    /   O peration     |                                                |
|   \\  /    A nd           | Author: Franjo Juretic                         |
|    \\/     M anipulation  | E-mail: franjo.juretic@c-fields.com            |
\*---------------------------------------------------------------------------*/

FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      meshDict;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

maxCellSize     1;

surfaceFile     "box.stl";

localRefinement
{
    "(profile.*)"
    {
        cellSize 0.2;
//                cellSize 0.05;
        refinementThickness 0.6;
    }
}

surfaceMeshRefinement
{
    hull
    {
        surfaceFile "mep.stl";
        cellSize 0.05;
//                cellSize 0.01;
        refinementThickness 0.2;
    }
}

refFine		0.002;
//refFine		0.001;
widthFine	0.012;

refNormal		0.01;
//refNormal		0.005;
widthNormal		0.05;

objectRefinements
{   
           wake
    {
        type        box;
        cellSize    0.25;
        centre          (2 -0.25 0);
        lengthX		6;
                lengthY		2.5;
                        lengthZ		10;
    }
    LEProfile0Fine
    {
    
        type cone;
    
        cellSize $refFine;
    
        radius0 $widthFine;
    
        radius1 $widthFine;
    
        p0 (0.0015871500000000014 0.0007266000000000022 0.0);
    
        p1 (0.0015871500000000014 0.0007266000000000022 1);
    }
    LEProfile0Normal
    {
    
        type cone;
    
        cellSize $refNormal;
    
        radius0 $widthNormal;
    
        radius1 $widthNormal;
    
        p0 (0.0015871500000000014 0.0007266000000000022 0.0);
    
        p1 (0.0015871500000000014 0.0007266000000000022 1);
    }
    TEProfile0Fine
    {
    
        type cone;
    
        cellSize $refFine;
    
        radius0 $widthFine;
    
        radius1 $widthFine;
    
        p0 (0.99841285 0.007095425000000001 0.0);
    
        p1 (0.99841285 0.007095425000000001 1);
    }
    TEProfile0Normal
    {
    
        type cone;
    
        cellSize $refNormal;
    
        radius0 $widthNormal;
    
        radius1 $widthNormal;
    
        p0 (0.99841285 0.007095425000000001 0.0);
    
        p1 (0.99841285 0.007095425000000001 1);
    }
    LEProfile1Fine
    {
    
        type cone;
    
        cellSize $refFine;
    
        radius0 $widthFine;
    
        radius1 $widthFine;
    
        p0 (1.0104958499999999 -0.10423967500000002 0.0);
    
        p1 (1.0104958499999999 -0.10423967500000002 1);
    }
    LEProfile1Normal
    {
    
        type cone;
    
        cellSize $refNormal;
    
        radius0 $widthNormal;
    
        radius1 $widthNormal;
    
        p0 (1.0104958499999999 -0.10423967500000002 0.0);
    
        p1 (1.0104958499999999 -0.10423967500000002 1);
    }
    TEProfile1Fine
    {
    
        type cone;
    
        cellSize $refFine;
    
        radius0 $widthFine;
    
        radius1 $widthFine;
    
        p0 (1.8201421 -0.6864014499999999 0.0);
    
        p1 (1.8201421 -0.6864014499999999 1);
    }
    TEProfile1Normal
    {
    
        type cone;
    
        cellSize $refNormal;
    
        radius0 $widthNormal;
    
        radius1 $widthNormal;
    
        p0 (1.8201421 -0.6864014499999999 0.0);
    
        p1 (1.8201421 -0.6864014499999999 1);
    }
}

boundaryLayers
{
    nLayers 0;

    patchBoundaryLayers
    {
    "(profile.*)"
{
nLayers 5;
    thicknessRatio 1.2;
    //maxFirstLayerThickness 0.01;
}
    }
        optimiseLayer 1;
}

renameBoundary
{
    newPatchNames
    {
                bottomEmptyFaces
        {
            type    symmetry;
            newName symmetry1;
        }
                        topEmptyFaces
        {
            type    symmetry;
            newName symmetry2;
        }
                        "(x.*|y.*)"
        {
            type    patch;
            newName inout;
        }
    
        profile0
        {
        
            type wall;
        
            newName profile0;
        }
    
        profile1
        {
        
            type wall;
        
            newName profile1;
        }
    }
}
// ************************************************************************* //
